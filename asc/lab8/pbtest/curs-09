The 8086 asm. lang. allows a symbol to be treated under two different data types?
Explain, justify:
Answer: Label directive with the data type unknown

	Conversion classification:

	1.
		i)  Signed conversions -> cbw, cwd

		ii) Unsigned conversions -> mov ah, 0; mov DX, 0
								-> ptr operator
								-> label directive

	2.
		i)  By enlargment	-> all 6 of them

		ii) By narrowing		->ptr and label

	3.
		i)  Destructive			-> cbw; cwd; mov ah, 0; mov DX, 0

		ii)	non. destructive	-> ptr and label

	Destructive conversions are always possible only by enlargement and never by narrowing, because a destructive conversion by narrowing is always by loss of information

	Remark: procedures in asm. lang. do not allow parameters

	Writing subrutines in any programming lang is the expression of the factorization principle (you give the common factor).

		Repetitive bolocks -> Textual replacement

	REPT counter
		sequence
	ENDM

	REPT	5
		dw	0
	ENDM

	== 

		dw	0
		dw	0
		dw	0
		dw	0
		dw	0

	Intval = 0
	REPT	5
		dw Intval
		Intval = Intval + 1
	ENDM

	IRP parameter, <arg1, [arg2], ...>
		sequence
	ENDM

	IRP	param, <0, 1, 4, 9, 16, 25>
		db param
	ENDM

	IRPC	parameter, string
		sequence
	ENDM

	IRPC	nr, 1375
		db nr
	ENDM		-> generates 4 bytes having the values 1, 3, 7 and 5


			INCLUDE directive
	
	INCLUDE filename

			Macros

	A macro is defined by the MACRO and ENDM directives

	name MACRO	[parameter [, parameter]...]
		instruction
	ENDM

	example:

	swap MACRO a, b
		mov AX, a
		mov a, b
		mov b, AX
	ENDM

	usage:
	D1 dw ?

	mov CX, 17
	mov D1, 15

	swap CX, D1

	A variable v is given having a value between 100.000 and 200.000. It is required to write a sequence of instructions in asm. lang. to multiply v with 4

						Data Management

	MOV		d, x	->d and x must have the same size !! only bites and words
	PUSH	s		->push to stack !! only words
	POP		d		->take from stack !! only words
	XCHG	d, x	->interchanges the values of d and x
	XLAT	[translation_table]

	The translation table:
		TabHexa	db	'0123456789abcdef'
		
		mov BX, offste TabHexa
		.....
		mov al, nr
		XLAT TabHexa

				XLAT instruction


